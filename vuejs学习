1、es6 中 var  y=new  Date().getYear(); 取这个年可以用es6语法  `${y}-` 
2、  写对不然可能加载不到css或js 文件   
     <script  src="./lib/vue-2.4.0.js"></script>
      <link href="./lib/bootstrap-3.3.7.css"  rel="stylesheet">
 3、vue 的时候 发现点击按钮表单提交重刷了 页面
 4、for(var i=0;i<list.length;i++){
       if(list[i].id==id){
         this.list.splice(i,1);//splice使用  会改变原数组不需要另外接受
       }
    }
    this.list=this.list.filter(item=>item.indexOf(this.keyword))!=-1)  会返回新数组 必须要接受
  5、自定义局部和全局指令
    使用的时候 直接  <input  v-focus>使用
    Vue.directive('focus',{
         bind:function(el,binding){
            // el.focus;  这里写无效果 因为是js事件必须元素加载后才生效 必须写在inserted方法中  el是原生的dom对象
        }
        inserted：function(el){
            el.focus();
        }
    })  
    使用的时候直接使用 <input v-color="'blue'">
    // 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：
      directives: {
        color: { // 为元素设置指定的字体颜色
          bind(el, binding) {
            el.style.color = binding.value;
          }
        },
        'font-weight': function (el, binding2) { // 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数
          el.style.fontWeight = binding2.value;
        }
      }
   6、生命周期函数
    var vm = new Vue({
      el: '#app',
      data: {
        msg: 'ok'
      },
      methods: {
        show() {
          console.log('执行了show方法')
        }
      },
      beforeCreate() { // 这是我们遇到的第一个生命周期函数，表示实例完全被创建出来之前，会执行它
        // console.log(this.msg)
        // this.show()
        // 注意： 在 beforeCreate 生命周期函数执行的时候，data 和 methods 中的 数据都还没有没初始化
      },
      created() { // 这是遇到的第二个生命周期函数
        // console.log(this.msg)
        // this.show()
        //  在 created 中，data 和 methods 都已经被初始化好了！
        // 如果要调用 methods 中的方法，或者操作 data 中的数据，最早，只能在 created 中操作
      },
      beforeMount() { // 这是遇到的第3个生命周期函数，表示 模板已经在内存中编辑完成了，但是尚未把 模板渲染到 页面中
        // console.log(document.getElementById('h3').innerText)
        // 在 beforeMount 执行的时候，页面中的元素，还没有被真正替换过来，只是之前写的一些模板字符串
      },
      mounted() { // 这是遇到的第4个生命周期函数，表示，内存中的模板，已经真实的挂载到了页面中，用户已经可以看到渲染好的页面了
        // console.log(document.getElementById('h3').innerText)
        // 注意： mounted 是 实例创建期间的最后一个生命周期函数，当执行完 mounted 就表示，实例已经被完全创建好了，此时，如果没有其它操作的话，这个实例，就静静的 躺在我们的内存中，一动不动
      },


      // 接下来的是运行中的两个事件
      beforeUpdate() { // 这时候，表示 我们的界面还没有被更新【数据被更新了吗？  数据肯定被更新了】
        /* console.log('界面上元素的内容：' + document.getElementById('h3').innerText)
        console.log('data 中的 msg 数据是：' + this.msg) */
        // 得出结论： 当执行 beforeUpdate 的时候，页面中的显示的数据，还是旧的，此时 data 数据是最新的，页面尚未和 最新的数据保持同步
      },
      updated() {
        console.log('界面上元素的内容：' + document.getElementById('h3').innerText)
        console.log('data 中的 msg 数据是：' + this.msg)
        // updated 事件执行的时候，页面和 data 数据已经保持同步了，都是最新的
      }

7、webpack  全局安装    
   npm i webpack   -D 本地安装
   npm i webpack-dev-server  -D  因为webpack-dev-server 依赖webpack 的本地安装
   webpack.config.js 
    const path=require("path")
    配置 打包文件main.js   文件打包到dist目录下 文件名字叫bundle.js   var todir=path.join(__dirname,'./dist')
    配置html缓存页面插件  如index.html 会自动引入bundle.js
  package.json 里面 script脚本配置  --hot  --open --port 3000  webpack-dev-server
  webpack  无法打包css 需要本地安装很多依赖  webpack.config.js 里面设置
  babel 是用来将高级js语法转低级语法   .babelrc 配置页面


8、node 中找包原则  import Vue  from 'Vue' (npm i vue -D)
   先在根目录找  
   然后node_module中找  vue 文件夹 ；package.json ；然后找main属性  的文件；  会提示正在使用runtime-only的包
   
   import   Vue  form './node_modules/vue/dist/vue.js'
   
9、vue  webpacka使用
   npm i  vue -S  
   import  Vue from 'vue'
   配置webpack 解析vue
   写自己的login.vue
   import  login  from  './login.vue'
   调用vue 第2种 render方法 渲染到    
   vra  vue  =new Vue({
        el:"#app",
        render:c=>c(login);
   })


10、项目
    A、index.html
     <body  style="background:white;">
	   <div  id="app"></div>
	 </body>
B、main.js
    import  Vue  from 'vue'
	import  App  from './App.vue'
	import  router  from  './Router/router.js' ()
	importe  vuex  from './Vuex/vuex.js'
	
	 var  app=new Vue({
	    el:"#app",
		render:c=>c(App);
	    router;
		vuex;
	 })
C、App.vue
    <template>
  <div  class="app">
     <mt-header fixed title="固定在顶部"></mt-header>
   
      <transition>
          <router-view/>
      </transition>
    
    <nav class="mui-bar mui-bar-tab">
			<router-link class="mui-tab-item" to="/head">
				<span class="mui-icon mui-icon-home"></span>
				<span class="mui-tab-label">首页</span>
			</router-link>
			<router-link class="mui-tab-item" to="/message">
				<span class="mui-icon mui-icon-email"><span class="mui-badge">9</span></span>
				<span class="mui-tab-label">消息</span>
			</router-link>
			<a class="mui-tab-item" href="#tabbar-with-contact">
				<span class="mui-icon mui-icon-extra mui-icon-extra-cart"></span>
				<span class="mui-tab-label">通讯录</span>
			</a>

			<a class="mui-tab-item" href="#tabbar-with-map">
				<span class="mui-icon mui-icon-gear"></span>
				<span class="mui-tab-label">设置</span>
			</a>
		</nav>
  </div>
</template>

<script>
export default {
  name: 'App'
}
</script>
<style scoped>
.app{
  padding-top: 40px;
  overflow-x: hidden;
  padding-bottom: 40px;
  
}
.v-enter{
    opacity: 0;
    transform: translateX(100%);
}


.v-leave-to{
    opacity: 0;
    transform: translateX(-100%);
    position: absolute;
}
.v-enter-active, .v-leave-active{
    transition: all  0.8s  ease;
}

</style>
	
D、router.js

import Vue from 'vue'
import Router from 'vue-router'
import HelloWorld from '@/components/HelloWorld'

import  Head  from  '../components/main/head'
import  Message  from  '../components/main/message'

Vue.use(Router)

export default new Router({
  routes: [
    {
      path: '/',
        redirect:'/head'
    },
    {
      path: '/head',
      name: 'head',
      component: Head
    },
    {
      path: '/message',
      name: 'message',
      component: Message
    }
  ],
  //路由高亮样式
  linkActiveClass:'mui-active'
})

E、scss使用异常 是sacc-loader 版本过高导致的  解决方法：npm install sass sass-loader@6.0.6
