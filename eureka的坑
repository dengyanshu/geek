server:
  # 服务器的HTTP端口，默认为80
  port: 50101
  #springboot 2.0后面的版本 是servlet.context-path  以前的版本的context-path
spring:
      application:
               name: geek-eureka-server  #2台eureka server  同一个应用名字
      #2.0后面的版本加spring前缀 账号和用户名 密码别写错
      security:
              basic:
                enabled: true 
              user:
                name: geek
                password: geek123
eureka:
   client:
      registerWithEureka: true
      fetchRegistry: true
      serviceUrl:
          defaultZone: http://geek:geek123@192.168.8.254:50100/eureka/,http://geek:geek123@192.168.1.252:50100/eureka/
   server:
       enable‐self‐preservation: false #是否开启自我保护模式  开发阶段关闭
       eviction‐interval‐timer‐in‐ms: 60000 #服务注册表清理间隔（单位毫秒，默认是60*1000））
   instance:
       prefer-ip-address: true  #自动解析ip
       #ip-address: 127.0.0.1 192.168.8.254
       #hostname: ${eureka.instance.ip-address}
       #instance-id: ${eureka.instance.ip-address}:${spring.application.name}:${server.port}
       instance-id:  ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}
       
 ===============================================================pom文件
  <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.geek</groupId>
    <artifactId>framework</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <relativePath>../framework/pom.xml</relativePath>
  </parent>
   <artifactId>eureka</artifactId>
  <name>eureka</name>
  <description>eureka微服务管理器</description>
  
  <dependencies>
	<dependency>
	        <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
	</dependency>
	
	<!-- 开启eureka安全验证 --> 
	<dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
	 
  
     <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
     </dependency>
     
     
     
       <dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-devtools</artifactId>
		    <!-- 这个需要为 true 热部署才有效 -->
		    <optional>true</optional>
		</dependency>

  </dependencies>
  
  <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <fork>true</fork> <!-- 如果没有该配置，devtools不会生效 -->
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <finalName>${project.artifactId}</finalName>
   </build>
</project>
 ===============================================================pom文件
 
@SpringBootApplication
@EnableEurekaServer
public class App {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
           SpringApplication.run(App.class, args);
	}
	
	@Configuration
	@EnableWebSecurity
	static class WebSecurityConfig extends WebSecurityConfigurerAdapter {
	    @Override
	    protected void configure(HttpSecurity http) throws Exception {
//	        // Spring Security 默认开启了所有 CSRF 攻击防御，需要禁用 /eureka 的防御
	    	http.csrf().ignoringAntMatchers("/eureka/**");
	    	//访问eureka控制台和/actuator时能做安全控制
	        super.configure(http);
//            http.csrf().disable();//禁用CSRF
//            http.authorizeRequests().anyRequest().authenticated().and().httpBasic();
	    }
	}
